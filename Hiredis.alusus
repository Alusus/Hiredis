import "alusus_spp";
import "libhiredis.so.0.14";

module Hiredis {
    class Context {
        def contextFuncs: ptr;   /* Function table */
        def err: int; /* Error flags, 0 when there is no error */
        def errStr: array[char, 128]; /* String representation of error when applicable */
    };

    class Reply {
        def tp:  int; /* REDIS_REPLY_* */
        def integer: int[64]; /* The integer when type is REDIS_REPLY_INTEGER */

        // TODO: Uncomment after switching to version 1
        // def dval: float[64]; /* The double when type is REDIS_REPLY_DOUBLE */

        def strLen: int[64]; /* Length of string */
        def str: ptr[char]; /* Used for REDIS_REPLY_ERROR, REDIS_REPLY_STRING
                               REDIS_REPLY_VERB, REDIS_REPLY_DOUBLE (in additional to dval),
                               and REDIS_REPLY_BIGNUM. */

        // TODO: Uncomment after switching to version 1
        // def vtype: array[char, 4]; /* Used for REDIS_REPLY_VERB, contains the null
        //                               terminated 3 character content type, such as "txt". */

        def elementsCount: int[64]; /* number of elements, for REDIS_REPLY_ARRAY */
        def elements: ptr[ptr[Reply]]; /* elements vector for REDIS_REPLY_ARRAY */
    };

    @expname[redisConnect]
    func connect(host: ptr[char], port: int): ptr[Context];

    @expname[redisCommand]
    func command(c: ptr[Context], format: ptr[char], ... any): ptr[Reply];

    @expname[freeReplyObject]
    func free(reply: ptr[Reply]);

    @expname[redisFree]
    func free(c: ptr[Context]);
}

